const fs = require("fs"); const path = require("path"); const axios = require("axios"); const sourceLang = "en"; const targetLangs = ["fr", "es", "de", "it", "pt", "nl", "pl", "ru", "ja", "ko", "zh"]; const docsDir = "docs"; async function translate(text, targetLang) { const response = await axios.post("https://api.openai.com/v1/chat/completions", { model: "gpt-4", messages: [{ role: "system", content: `You are a professional translator. Translate the following markdown content from English to ${targetLang}. Preserve all markdown formatting, links, and special characters. Do not translate code blocks, URLs, or technical terms.` }, { role: "user", content: text }], temperature: 0.3 }, { headers: { "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`, "Content-Type": "application/json" } }); return response.data.choices[0].message.content; } async function processFile(filePath, targetLang) { console.log(`Translating ${filePath} to ${targetLang}...`); const content = fs.readFileSync(filePath, "utf8"); try { const translated = await translate(content, targetLang); const targetPath = filePath.replace(`/${sourceLang}/`, `/${targetLang}/`); const targetDir = path.dirname(targetPath); if (!fs.existsSync(targetDir)) { fs.mkdirSync(targetDir, { recursive: true }); } fs.writeFileSync(targetPath, translated); console.log(`Successfully translated ${filePath} to ${targetLang}`); } catch (error) { console.error(`Error translating ${filePath} to ${targetLang}:`, error.message); } } async function processDirectory(directory, targetLang) { const items = fs.readdirSync(directory); for (const item of items) { const fullPath = path.join(directory, item); const stat = fs.statSync(fullPath); if (stat.isDirectory()) { await processDirectory(fullPath, targetLang); } else if (item.endsWith(".md")) { await processFile(fullPath, targetLang); } } } (async () => { const sourceDir = path.join(docsDir, sourceLang); if (!fs.existsSync(sourceDir)) { console.error(`Source directory ${sourceDir} does not exist!`); process.exit(1); } for (const lang of targetLangs) { console.log(`
Processing translations for ${lang}...`); await processDirectory(sourceDir, lang); } console.log("
Translation process completed!"); })().catch(error => { console.error("Translation process failed:", error); process.exit(1); });
